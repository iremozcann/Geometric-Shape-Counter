
#  Author: İrem Özcan & Tahir Burak Yavuz
#  Description: Automatically detect the type of the geometric shapes in an image and count the number of each shape, their perimeters and areas.
#  The GUI interface used in the project allows the user to select an image, view the types, numbers, perimeters and areas of the detected shapes.
# Created by: PyQt5 UI code generator 5.15.4
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import cv2
import os
import imutils
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import QMessageBox

project_dir = os.path.dirname(os.path.abspath(__file__))
image_dir = os.path.join(project_dir, 'Images')

class Ui_MainWindow(object):
    def __init__(self):
        self.tmp = None
        self.image = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Geometric Shape Counter")
        MainWindow.resize(1500, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMouseTracking(False)
        self.label.setTabletTracking(False)
        self.label.setAcceptDrops(False)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setLineWidth(1)
        self.label.setText("")
        self.label.setScaledContents(True)
        self.label.setWordWrap(False)
        self.label.setOpenExternalLinks(False)
        self.label.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMouseTracking(False)
        self.label_2.setTabletTracking(False)
        self.label_2.setAcceptDrops(False)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_2.setLineWidth(1)
        self.label_2.setText("")
        self.label_2.setScaledContents(True)
        self.label_2.setWordWrap(False)
        self.label_2.setOpenExternalLinks(False)
        self.label_2.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.button = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.button.setFont(font)
        self.button.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.button.setAutoFillBackground(False)
        self.button.setObjectName("button")
        self.gridLayout.addWidget(self.button, 1, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 1, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Courier")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 2, 0, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionclose = QtWidgets.QAction(MainWindow)
        self.actionclose.setObjectName("actionclose")

        self.retranslateUi(MainWindow)
        self.button.clicked.connect(self.label.showNormal)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Geometric Shape Counter", "Geometric Shape Counter"))
        self.button.setText(_translate("Geometric Shape Counter", "Select Image"))
        self.pushButton_2.setText(_translate("Geometric Shape Counter", "Geometric Shape Counter"))
        self.lineEdit.setText(_translate("Geometric Shape Counter", "Number of Geometric Shape:"))
        self.actionclose.setText(_translate("Geometric Shape Counter", "close"))
        # ADDITİONAL CODES
        self.button.clicked.connect(self.select)
        self.pushButton_2.clicked.connect(self.result)

    def select(self):
        file, check = QFileDialog.getOpenFileName(None, 'Select Image', image_dir)
        self.image = cv2.imread(file)
        self.setPhoto(self.image)

    def setPhoto(self, image):

        self.tmp = image
        image = imutils.resize(image, width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    def result(self):
        global count, x, y, shape
        img = self.image
        img1 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        th, img_th = cv2.threshold(img1, 220, 255, cv2.THRESH_BINARY_INV)
        img_floodfill = img_th.copy()
        h, w = img_th.shape[:2]
        mask = np.zeros((h + 2, w + 2), np.uint8)
        cv2.floodFill(img_floodfill, mask, (0, 0), 255)
        img_floodfill_inv = cv2.bitwise_not(img_floodfill)
        img_out = img_th | img_floodfill_inv
        contours, _ = cv2.findContours(img_out, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        shape_counts = {}
        for cnt in contours:
            area = cv2.contourArea(cnt)
            perimeter = cv2.arcLength(cnt, True)
            if area > 1000:
                approx = cv2.approxPolyDP(cnt, 0.011 * cv2.arcLength(cnt, True), True)
                corner_count = len(approx)
                x, y, w, h = cv2.boundingRect(approx)
                if corner_count == 3:
                    shape = "triangle"
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Triangle", (x + 10, y + 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))
                elif corner_count == 4:
                    asp_ratio = w / float(h)
                    if 0.98 < asp_ratio < 1.03:
                        shape = "square"
                        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                        cv2.putText(img, "Square", (x + 10, y + 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))
                    else:
                        shape = "rectangle"
                        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                        cv2.putText(img, "Rectangle", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                elif corner_count == 5:
                    shape = "pentagon"
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Pentagon", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                elif corner_count == 6:
                    shape = "hexagon"
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Hexagon", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                elif corner_count == 7:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Heptagon ", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                    shape = "heptagon"
                elif corner_count == 8:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Octagon", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                    shape = "octagon"
                elif corner_count == 9:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Nonagon", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                    shape = "nonagon"
                elif corner_count == 10:
                    cv2.putText(img, "Star", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                    shape = "star"
                elif corner_count > 10:
                    asp_ratio = w / float(h)
                    if 0.95 < asp_ratio < 1.05:
                        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                        cv2.putText(img, "Circle", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                        shape = "circle"
                    else:
                        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                        cv2.putText(img, "Oval", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                        shape = "oval"
                else:
                    shape = "unknown"
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 1)
                    cv2.putText(img, "Unknown", (x + 10, y + 10), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 0, 0))
                cv2.drawContours(img, cnt, -1, (0, 255, 0), 3)

            cv2.putText(img, "Area:" + str(int(area)), (x + 35, y + 35), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0), 1, )
            cv2.putText(img, "Perimeter:" + str(int(perimeter)), (x + 35, y + 65), cv2.FONT_HERSHEY_COMPLEX, 0.5,
                        (0, 0, 0), 1, )

            if shape in shape_counts:
                shape_counts[shape] += 1
            else:
                shape_counts[shape] = 1

        for i, cnt in enumerate(contours):
            M = cv2.moments(cnt)
            if M['m00'] != 0.0:
                x1 = int(M['m10'] / M['m00'])
                y1 = int(M['m01'] / M['m00'])
            area = cv2.contourArea(cnt)
            perimeter = cv2.arcLength(cnt, True)
            perimeter = round(perimeter, 4)
            print(f'Area of contour {i + 1}:', area)
            print(f'Perimeter of contour {i + 1}:', perimeter)

        img = imutils.resize(img, width=640)
        frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.label_2.setPixmap(QtGui.QPixmap.fromImage(img))

        self.lineEdit.setText(f"Number of Geometric Shape:{len(contours)}")

        for shape, count in shape_counts.items():
            message_box = QMessageBox()
            message_box.setWindowTitle("Shape Count")
            message_box.setText(f"{shape}: {count}")
            message_box.exec_()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
